{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@fof/upload/webpack/bootstrap","webpack://@fof/upload/webpack/runtime/compat get default export","webpack://@fof/upload/webpack/runtime/define property getters","webpack://@fof/upload/webpack/runtime/hasOwnProperty shorthand","webpack://@fof/upload/webpack/runtime/make namespace object","webpack://@fof/upload/external root \"flarum.core.compat['admin/app']\"","webpack://@fof/upload/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@fof/upload/external root \"flarum.core.compat['common/components/Button']\"","webpack://@fof/upload/external root \"flarum.core.compat['admin/utils/saveSettings']\"","webpack://@fof/upload/external root \"flarum.core.compat['common/components/Alert']\"","webpack://@fof/upload/external root \"flarum.core.compat['common/components/Select']\"","webpack://@fof/upload/external root \"flarum.core.compat['common/components/Switch']\"","webpack://@fof/upload/external root \"flarum.core.compat['admin/components/UploadImageButton']\"","webpack://@fof/upload/external root \"flarum.core.compat['common/utils/withAttr']\"","webpack://@fof/upload/external root \"flarum.core.compat['common/utils/Stream']\"","webpack://@fof/upload/external root \"flarum.core.compat['admin/components/ExtensionPage']\"","webpack://@fof/upload/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@fof/upload/./src/admin/components/UploadPage.js","webpack://@fof/upload/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/upload/./src/admin/components/index.js","webpack://@fof/upload/./src/admin/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/utils/saveSettings'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Alert'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Switch'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/UploadImageButton'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/withAttr'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/Stream'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/components/ExtensionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","import app from 'flarum/admin/app';\nimport Button from 'flarum/common/components/Button';\nimport saveSettings from 'flarum/admin/utils/saveSettings';\nimport Alert from 'flarum/common/components/Alert';\nimport Select from 'flarum/common/components/Select';\nimport Switch from 'flarum/common/components/Switch';\nimport UploadImageButton from 'flarum/admin/components/UploadImageButton';\nimport withAttr from 'flarum/common/utils/withAttr';\nimport Stream from 'flarum/common/utils/Stream';\nimport ExtensionPage from 'flarum/admin/components/ExtensionPage';\nimport ItemList from 'flarum/common/utils/ItemList';\n\n/* global m */\n\nexport default class UploadPage extends ExtensionPage {\n  oninit(vnode) {\n    super.oninit(vnode);\n    // whether we are saving the settings or not right now\n    this.loading = false;\n\n    // the fields we need to watch and to save\n    this.fields = [\n      // image\n      'resizeMaxWidth',\n      'cdnUrl',\n      'maxFileSize',\n      'whitelistedClientExtensions',\n      'composerButtonVisiblity',\n      // watermark\n      'watermark',\n      'watermarkPosition',\n      // Imgur\n      'imgurClientId',\n      // AWS\n      'awsS3Key',\n      'awsS3Secret',\n      'awsS3Bucket',\n      'awsS3Region',\n      'awsS3Endpoint',\n      'awsS3ACL',\n      // QIniu\n      'qiniuKey',\n      'qiniuSecret',\n      'qiniuBucket',\n    ];\n\n    // the checkboxes we need to watch and to save.\n    this.checkboxes = ['mustResize', 'addsWatermarks', 'disableHotlinkProtection', 'disableDownloadLogging', 'awsS3UsePathStyleEndpoint'];\n\n    // fields that are objects\n    this.objects = ['mimeTypes'];\n\n    // watermark positions\n    this.watermarkPositions = {\n      'top-left': 'top-left',\n      'top-right': 'top-right',\n      'bottom-left': 'bottom-left',\n      'bottom-right': 'bottom-right',\n      center: 'center',\n      left: 'left',\n      top: 'top',\n      right: 'right',\n      bottom: 'bottom',\n    };\n\n    // Composer button options\n    this.composerButtonVisiblityOptions = {\n      both: app.translator.trans('fof-upload.admin.labels.composer_buttons.options.both'),\n      'upload-btn': app.translator.trans('fof-upload.admin.labels.composer_buttons.options.upload-btn'),\n      'media-btn': app.translator.trans('fof-upload.admin.labels.composer_buttons.options.media-btn'),\n    };\n\n    // get the saved settings from the database\n    const settings = app.data.settings;\n\n    // our package prefix (to be added to every field and checkbox in the setting table)\n    this.settingsPrefix = 'fof-upload';\n\n    // Options for the Upload methods dropdown menu.\n    this.uploadMethodOptions = settings[this.addPrefix('availableUploadMethods')] || {};\n    // Options for the Template dropdown menu.\n    this.templateOptions = settings[this.addPrefix('availableTemplates')] || {};\n    // Contains current values.\n    this.values = {};\n    // bind the values of the fields and checkboxes to the getter/setter functions\n    this.fields.forEach((key) => (this.values[key] = Stream(settings[this.addPrefix(key)])));\n    this.checkboxes.forEach((key) => (this.values[key] = Stream(settings[this.addPrefix(key)] === '1')));\n    this.objects.forEach((key) => (this.values[key] = settings[this.addPrefix(key)] ? Stream(JSON.parse(settings[this.addPrefix(key)])) : Stream()));\n\n    // Set a sane default in case no mimeTypes have been configured yet.\n    // Since 'local' (or others) can now be disabled, pick the last entry in the object for default\n    this.defaultAdap = Object.keys(this.uploadMethodOptions)[Object.keys(this.uploadMethodOptions).length - 1];\n    this.values.mimeTypes() ||\n      (this.values.mimeTypes = Stream({\n        '^image\\\\/.*': {\n          adapter: this.defaultAdap,\n          template: 'image-preview',\n        },\n      }));\n\n    this.newMimeType = {\n      regex: Stream(''),\n      adapter: Stream(this.defaultAdap),\n      template: Stream('file'),\n    };\n  }\n\n  /**\n   * Show the actual ImageUploadPage.\n   *\n   * @returns {*}\n   */\n  content() {\n    const max_post = app.data.settings[this.addPrefix('php_ini.post_max_size')];\n    const max_upload = app.data.settings[this.addPrefix('php_ini.upload_max_filesize')];\n    return [\n      m('.UploadPage', [\n        m('.container', [\n          m(\n            'form',\n            {\n              onsubmit: this.onsubmit.bind(this),\n            },\n            [\n              m('fieldset', [\n                m('legend', app.translator.trans('fof-upload.admin.labels.preferences.title')),\n                m('label', app.translator.trans('fof-upload.admin.labels.preferences.max_file_size')),\n                m('input.FormControl', {\n                  value: this.values.maxFileSize() || 2048,\n                  oninput: withAttr('value', this.values.maxFileSize),\n                  type: 'number',\n                  min: '0',\n                }),\n                m(\n                  '.helpText',\n                  app.translator.trans('fof-upload.admin.labels.preferences.php_ini_values', {\n                    post: max_post,\n                    upload: max_upload,\n                  })\n                ),\n                m('label', app.translator.trans('fof-upload.admin.labels.preferences.mime_types')),\n                m(\n                  '.MimeTypes--Container',\n                  Object.keys(this.values.mimeTypes()).map((mime) => {\n                    let config = this.values.mimeTypes()[mime];\n                    // Compatibility for older versions.\n                    if (typeof config !== 'object') {\n                      config = {\n                        adapter: config,\n                        template: 'file',\n                      };\n                    }\n\n                    return m('div', [\n                      m('input.FormControl.MimeTypes', {\n                        value: mime,\n                        oninput: withAttr('value', this.updateMimeTypeKey.bind(this, mime)),\n                      }),\n                      Select.component({\n                        options: this.uploadMethodOptions,\n                        onchange: this.updateMimeTypeAdapter.bind(this, mime, config),\n                        value: config.adapter || 'local',\n                      }),\n                      Select.component({\n                        options: this.getTemplateOptionsForInput(),\n                        onchange: this.updateMimeTypeTemplate.bind(this, mime, config),\n                        value: config.template || 'local',\n                      }),\n                      Button.component(\n                        {\n                          type: 'button',\n                          className: 'Button Button--warning',\n                          onclick: this.deleteMimeType.bind(this, mime),\n                        },\n                        'x'\n                      ),\n                    ]);\n                  }),\n                  m('br'),\n                  m('div', [\n                    m('input.FormControl.MimeTypes.add-MimeType-key', {\n                      value: this.newMimeType.regex(),\n                      oninput: withAttr('value', this.newMimeType.regex),\n                    }),\n                    Select.component({\n                      options: this.uploadMethodOptions,\n                      className: 'add-MimeType-value',\n                      oninput: withAttr('value', this.newMimeType.adapter),\n                      value: this.newMimeType.adapter(),\n                    }),\n                    Select.component({\n                      options: this.getTemplateOptionsForInput(),\n                      className: 'add-MimeType-value',\n                      oninput: withAttr('value', this.newMimeType.template),\n                      value: this.newMimeType.template(),\n                    }),\n                    Button.component(\n                      {\n                        type: 'button',\n                        className: 'Button Button--warning',\n                        onclick: this.addMimeType.bind(this),\n                      },\n                      '+'\n                    ),\n                  ])\n                ),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.mime_types')),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.download_templates')),\n                this.templateOptionsDescriptions(),\n              ]),\n              m('fieldset.composerButtons', [\n                m('legend', app.translator.trans('fof-upload.admin.labels.composer_buttons.title')),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.composer_buttons')),\n                m('div', [\n                  Select.component({\n                    options: this.composerButtonVisiblityOptions,\n                    onchange: this.values.composerButtonVisiblity,\n                    value: this.values.composerButtonVisiblity() || 'both',\n                  }),\n                ]),\n              ]),\n              m('fieldset', [\n                m('legend', app.translator.trans('fof-upload.admin.labels.resize.title')),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.resize')),\n                Switch.component(\n                  {\n                    state: this.values.mustResize() || false,\n                    onchange: this.values.mustResize,\n                  },\n                  app.translator.trans('fof-upload.admin.labels.resize.toggle')\n                ),\n                m('label', app.translator.trans('fof-upload.admin.labels.resize.max_width')),\n                m('input', {\n                  className: 'FormControl',\n                  value: this.values.resizeMaxWidth() || 100,\n                  oninput: withAttr('value', this.values.resizeMaxWidth),\n                  disabled: !this.values.mustResize(),\n                  type: 'number',\n                  min: '0',\n                }),\n              ]),\n              m('fieldset', [\n                m('legend', app.translator.trans('fof-upload.admin.labels.client_extension.title')),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.client_extension')),\n                m('input', {\n                  className: 'FormControl',\n                  value: this.values.whitelistedClientExtensions() || '',\n                  oninput: withAttr('value', this.values.whitelistedClientExtensions),\n                }),\n              ]),\n              m('fieldset', [\n                m('legend', app.translator.trans('fof-upload.admin.labels.watermark.title')),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.watermark')),\n                Switch.component(\n                  {\n                    state: this.values.addsWatermarks() || false,\n                    onchange: this.values.addsWatermarks,\n                  },\n                  app.translator.trans('fof-upload.admin.labels.watermark.toggle')\n                ),\n                m('label', app.translator.trans('fof-upload.admin.labels.watermark.position')),\n                m('div', [\n                  Select.component({\n                    options: this.watermarkPositions,\n                    onchange: this.values.watermarkPosition,\n                    value: this.values.watermarkPosition() || 'bottom-right',\n                  }),\n                ]),\n                m('label', {}, app.translator.trans('fof-upload.admin.labels.watermark.file')),\n                UploadImageButton.component({\n                  name: 'fof/watermark',\n                }),\n              ]),\n              m('fieldset', [\n                m('legend', app.translator.trans('fof-upload.admin.labels.disable-hotlink-protection.title')),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-hotlink-protection')),\n                Switch.component(\n                  {\n                    state: this.values.disableHotlinkProtection() || false,\n                    onchange: this.values.disableHotlinkProtection,\n                  },\n                  app.translator.trans('fof-upload.admin.labels.disable-hotlink-protection.toggle')\n                ),\n                m('legend', app.translator.trans('fof-upload.admin.labels.disable-download-logging.title')),\n                m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-download-logging')),\n                Switch.component(\n                  {\n                    state: this.values.disableDownloadLogging() || false,\n                    onchange: this.values.disableDownloadLogging,\n                  },\n                  app.translator.trans('fof-upload.admin.labels.disable-download-logging.toggle')\n                ),\n              ]),\n              m('fieldset', [\n                m('legend', app.translator.trans('fof-upload.admin.labels.local.title')),\n                m('label', app.translator.trans('fof-upload.admin.labels.local.cdn_url')),\n                m('input.FormControl', {\n                  value: this.values.cdnUrl() || '',\n                  oninput: withAttr('value', this.values.cdnUrl),\n                }),\n              ]),\n\n              this.adaptorItems().toArray(),\n\n              Button.component(\n                {\n                  type: 'submit',\n                  className: 'Button Button--primary',\n                  loading: this.loading,\n                  disabled: !this.changed(),\n                },\n                app.translator.trans('core.admin.settings.submit_button')\n              ),\n            ]\n          ),\n        ]),\n      ]),\n    ];\n  }\n\n  adaptorItems() {\n    const items = new ItemList();\n\n    if (this.uploadMethodOptions['imgur'] !== undefined) {\n      items.add(\n        'imgur',\n        m('.imgur', [\n          m('fieldset', [\n            m('legend', app.translator.trans('fof-upload.admin.labels.imgur.title')),\n            m('label', app.translator.trans('fof-upload.admin.labels.imgur.client_id')),\n            m('input.FormControl', {\n              value: this.values.imgurClientId() || '',\n              oninput: withAttr('value', this.values.imgurClientId),\n            }),\n          ]),\n        ])\n      );\n    }\n\n    if (this.uploadMethodOptions['qiniu'] !== undefined) {\n      items.add(\n        'qiniu',\n        m('.qiniu', [\n          m('fieldset', [\n            m('legend', app.translator.trans('fof-upload.admin.labels.qiniu.title')),\n            m('label', app.translator.trans('fof-upload.admin.labels.qiniu.key')),\n            m('input.FormControl', {\n              value: this.values.qiniuKey() || '',\n              oninput: withAttr('value', this.values.qiniuKey),\n            }),\n            m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.secret')),\n            m('input.FormControl', {\n              value: this.values.qiniuSecret() || '',\n              oninput: withAttr('value', this.values.qiniuSecret),\n            }),\n            m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.bucket')),\n            m('input.FormControl', {\n              value: this.values.qiniuBucket() || '',\n              oninput: withAttr('value', this.values.qiniuBucket),\n            }),\n          ]),\n        ])\n      );\n    }\n\n    if (this.uploadMethodOptions['aws-s3'] !== undefined) {\n      items.add(\n        'aws-s3',\n        m('.aws', [\n          m('fieldset', [\n            m('legend', app.translator.trans('fof-upload.admin.labels.aws-s3.title')),\n            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.key')),\n            m('input.FormControl', {\n              value: this.values.awsS3Key() || '',\n              oninput: withAttr('value', this.values.awsS3Key),\n            }),\n            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.secret')),\n            m('input.FormControl', {\n              value: this.values.awsS3Secret() || '',\n              oninput: withAttr('value', this.values.awsS3Secret),\n            }),\n            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.bucket')),\n            m('input.FormControl', {\n              value: this.values.awsS3Bucket() || '',\n              oninput: withAttr('value', this.values.awsS3Bucket),\n            }),\n            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.region')),\n            m('input.FormControl', {\n              value: this.values.awsS3Region() || '',\n              oninput: withAttr('value', this.values.awsS3Region),\n            }),\n          ]),\n          m('fieldset', [\n            m('legend', app.translator.trans('fof-upload.admin.labels.aws-s3.advanced_title')),\n            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.s3_compatible_storage')),\n            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.endpoint')),\n            m('input.FormControl', {\n              value: this.values.awsS3Endpoint() || '',\n              oninput: withAttr('value', this.values.awsS3Endpoint),\n            }),\n            Switch.component(\n              {\n                state: this.values.awsS3UsePathStyleEndpoint() || false,\n                onchange: this.values.awsS3UsePathStyleEndpoint,\n              },\n              app.translator.trans('fof-upload.admin.labels.aws-s3.use_path_style_endpoint')\n            ),\n            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.acl')),\n            m('input.FormControl', {\n              value: this.values.awsS3ACL() || '',\n              oninput: withAttr('value', this.values.awsS3ACL),\n            }),\n            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.s3_acl')),\n          ]),\n        ])\n      );\n    }\n\n    return items;\n  }\n\n  getTemplateOptionsForInput() {\n    const options = {};\n\n    for (let option in this.templateOptions) {\n      if (!this.templateOptions.hasOwnProperty(option)) {\n        continue;\n      }\n\n      options[option] = this.templateOptions[option].name;\n    }\n\n    return options;\n  }\n\n  updateMimeTypeKey(mime, value) {\n    this.values.mimeTypes()[value] = this.values.mimeTypes()[mime];\n\n    this.deleteMimeType(mime);\n  }\n\n  updateMimeTypeAdapter(mime, config, value) {\n    config.adapter = value;\n    this.values.mimeTypes()[mime] = config;\n  }\n\n  updateMimeTypeTemplate(mime, config, value) {\n    config.template = value;\n    this.values.mimeTypes()[mime] = config;\n  }\n\n  deleteMimeType(mime) {\n    delete this.values.mimeTypes()[mime];\n  }\n\n  templateOptionsDescriptions() {\n    const children = [];\n\n    for (let template in this.templateOptions) {\n      if (!this.templateOptions.hasOwnProperty(template)) {\n        continue;\n      }\n\n      children.push(\n        <li>\n          {this.templateOptions[template].name}: {m.trust(this.templateOptions[template].description)}\n        </li>\n      );\n    }\n\n    return m('ul', children);\n  }\n\n  addMimeType() {\n    this.values.mimeTypes()[this.newMimeType.regex()] = {\n      adapter: this.newMimeType.adapter(),\n      template: this.newMimeType.template(),\n    };\n\n    this.newMimeType.regex('');\n    this.newMimeType.adapter('local');\n    this.newMimeType.template('file');\n  }\n\n  /**\n   * Checks if the values of the fields and checkboxes are different from\n   * the ones stored in the database\n   *\n   * @returns boolean\n   */\n  changed() {\n    const fieldsCheck = this.fields.some((key) => this.values[key]() !== app.data.settings[this.addPrefix(key)]);\n    const checkboxesCheck = this.checkboxes.some((key) => this.values[key]() !== (app.data.settings[this.addPrefix(key)] === '1'));\n    const objectsCheck = this.objects.some((key) => JSON.stringify(this.values[key]()) !== app.data.settings[this.addPrefix(key)]);\n\n    return fieldsCheck || checkboxesCheck || objectsCheck;\n  }\n\n  /**\n   * Saves the settings to the database and redraw the page\n   *\n   * @param e\n   */\n  onsubmit(e) {\n    // prevent the usual form submit behaviour\n    e.preventDefault();\n\n    // if the page is already saving, do nothing\n    if (this.loading) return;\n\n    // prevents multiple savings\n    this.loading = true;\n\n    // remove previous success popup\n    app.alerts.dismiss(this.successAlert);\n\n    const settings = {};\n\n    // gets all the values from the form\n    this.fields.forEach((key) => (settings[this.addPrefix(key)] = this.values[key]()));\n    this.checkboxes.forEach((key) => (settings[this.addPrefix(key)] = this.values[key]()));\n    this.objects.forEach((key) => (settings[this.addPrefix(key)] = JSON.stringify(this.values[key]())));\n\n    // actually saves everything in the database\n    saveSettings(settings)\n      .then(() => {\n        // on success, show popup\n        this.successAlert = app.alerts.show(Alert, { type: 'success' }, app.translator.trans('core.admin.settings.saved_message'));\n      })\n      .catch(() => {})\n      .then(() => {\n        // return to the initial state and redraw the page\n        this.loading = false;\n        m.redraw();\n      });\n  }\n\n  /**\n   * Adds the prefix `this.settingsPrefix` at the beginning of `key`\n   *\n   * @returns string\n   */\n  addPrefix(key) {\n    return this.settingsPrefix + '.' + key;\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import UploadPage from './UploadPage';\n\nexport const components = {\n  UploadPage,\n};\n","import app from 'flarum/admin/app';\nimport UploadPage from './components/UploadPage';\n\nexport * from './components';\n\napp.initializers.add('fof-upload', (app) => {\n  app.extensionData\n    .for('fof-upload')\n    .registerPage(UploadPage)\n    .registerPermission(\n      {\n        icon: 'far fa-file',\n        label: app.translator.trans('fof-upload.admin.permissions.upload_label'),\n        permission: 'fof-upload.upload',\n      },\n      'start',\n      50\n    )\n    .registerPermission(\n      {\n        icon: 'fas fa-download',\n        label: app.translator.trans('fof-upload.admin.permissions.download_label'),\n        permission: 'fof-upload.download',\n        allowGuest: true,\n      },\n      'view',\n      50\n    )\n    .registerPermission(\n      {\n        icon: 'fas fa-eye',\n        label: app.translator.trans('fof-upload.admin.permissions.view_user_uploads_label'),\n        permission: 'fof-upload.viewUserUploads',\n      },\n      'moderate',\n      50\n    )\n    .registerPermission(\n      {\n        icon: 'fas fa-trash',\n        label: app.translator.trans('fof-upload.admin.permissions.delete_uploads_of_others_label'),\n        permission: 'fof-upload.deleteUserUploads',\n      },\n      'moderate',\n      50\n    );\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","UploadPage","subClass","superClass","create","constructor","oninit","vnode","this","loading","fields","checkboxes","objects","watermarkPositions","center","left","top","right","bottom","composerButtonVisiblityOptions","both","app","settings","settingsPrefix","uploadMethodOptions","addPrefix","templateOptions","values","forEach","Stream","JSON","parse","defaultAdap","keys","length","mimeTypes","adapter","template","newMimeType","regex","content","max_post","max_upload","m","onsubmit","bind","maxFileSize","oninput","withAttr","type","min","post","upload","map","mime","config","updateMimeTypeKey","Select","options","onchange","updateMimeTypeAdapter","getTemplateOptionsForInput","updateMimeTypeTemplate","Button","className","onclick","deleteMimeType","addMimeType","templateOptionsDescriptions","composerButtonVisiblity","Switch","state","mustResize","resizeMaxWidth","disabled","whitelistedClientExtensions","addsWatermarks","watermarkPosition","UploadImageButton","name","disableHotlinkProtection","disableDownloadLogging","cdnUrl","adaptorItems","toArray","changed","items","ItemList","undefined","add","imgurClientId","qiniuKey","qiniuSecret","qiniuBucket","awsS3Key","awsS3Secret","awsS3Bucket","awsS3Region","awsS3Endpoint","awsS3UsePathStyleEndpoint","awsS3ACL","option","children","push","trust","description","fieldsCheck","some","checkboxesCheck","objectsCheck","stringify","e","preventDefault","successAlert","saveSettings","then","Alert","redraw","ExtensionPage","components","extensionData","registerPage","registerPermission","icon","label","translator","trans","permission","allowGuest"],"sourceRoot":""}