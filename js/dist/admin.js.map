{"version":3,"sources":["webpack://module.exports/webpack/bootstrap","webpack://module.exports/external \"flarum.core.compat['extend']\"","webpack://module.exports/external \"flarum.core.compat['components/Select']\"","webpack://module.exports/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://module.exports/external \"flarum.core.compat['Component']\"","webpack://module.exports/external \"flarum.core.compat['components/Switch']\"","webpack://module.exports/external \"flarum.core.compat['components/Button']\"","webpack://module.exports/external \"flarum.core.compat['components/PermissionGrid']\"","webpack://module.exports/external \"flarum.core.compat['app']\"","webpack://module.exports/external \"flarum.core.compat['components/AdminNav']\"","webpack://module.exports/external \"flarum.core.compat['components/AdminLinkButton']\"","webpack://module.exports/external \"flarum.core.compat['utils/saveSettings']\"","webpack://module.exports/external \"flarum.core.compat['components/Alert']\"","webpack://module.exports/external \"flarum.core.compat['components/UploadImageButton']\"","webpack://module.exports/./src/admin/components/UploadPage.js","webpack://module.exports/./src/admin/addUploadPane.js","webpack://module.exports/./src/admin/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","UploadPage_UploadPage","init","_this","this","loading","fields","checkboxes","objects","watermarkPositions","top-left","top-right","bottom-left","bottom-right","center","left","top","right","bottom","settings","app","data","settingsPrefix","uploadMethodOptions","addPrefix","templateOptions","values","forEach","prop","JSON","parse","mimeTypes","^image\\/.*","adapter","template","newMimeType","regex","view","_this2","className","onsubmit","translator","trans","maxFileSize","oninput","withAttr","keys","map","mime","config","updateMimeTypeKey","Select_default","a","component","options","onchange","updateMimeTypeAdapter","getTemplateOptionsForInput","updateMimeTypeTemplate","Button_default","type","children","onclick","deleteMimeType","addMimeType","templateOptionsDescriptions","Switch_default","state","mustResize","resizeMaxWidth","disabled","addsWatermarks","watermarkPosition","UploadImageButton_default","disableHotlinkProtection","disableDownloadLogging","cdnUrl","imgurClientId","awsS3Key","awsS3Secret","awsS3Bucket","awsS3Region","ovhContainer","ovhTenantId","ovhUsername","ovhPassword","ovhRegion","b2AccountId","b2ApplicationKey","b2BucketName","b2DownloadUrl","changed","option","push","description","_this3","fieldsCheck","some","checkboxesCheck","objectsCheck","stringify","e","_this4","preventDefault","alerts","dismiss","successAlert","saveSettings_default","then","show","Alert_default","catch","redraw","external_flarum_core_compat_Component_default","addUploadPane","routes","path","extensionSettings","route","external_flarum_core_compat_extend_","AdminNav_default","items","add","AdminLinkButton_default","href","icon","external_flarum_core_compat_app_default","initializers","PermissionGrid_default","label","permission","allowGuest"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/Select'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/PermissionGrid'];","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['components/AdminNav'];","module.exports = flarum.core.compat['components/AdminLinkButton'];","module.exports = flarum.core.compat['utils/saveSettings'];","module.exports = flarum.core.compat['components/Alert'];","module.exports = flarum.core.compat['components/UploadImageButton'];","import Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport saveSettings from 'flarum/utils/saveSettings';\nimport Alert from 'flarum/components/Alert';\nimport Select from 'flarum/components/Select';\nimport Switch from 'flarum/components/Switch';\nimport UploadImageButton from 'flarum/components/UploadImageButton';\n\nexport default class UploadPage extends Component {\n\n  init() {\n    // whether we are saving the settings or not right now\n    this.loading = false;\n\n    // the fields we need to watch and to save\n    this.fields = [\n      // image\n      'resizeMaxWidth',\n      'cdnUrl',\n      'maxFileSize',\n      'overrideAvatarUpload',\n      // watermark\n      'watermark',\n      'watermarkPosition',\n      // Imgur\n      'imgurClientId',\n      // AWS\n      'awsS3Key',\n      'awsS3Secret',\n      'awsS3Bucket',\n      'awsS3Region',\n      // OVH\n      'ovhUsername',\n      'ovhPassword',\n      'ovhTenantId',\n      'ovhContainer',\n      'ovhRegion',\n      // Backblaze\n      'b2AccountId',\n      'b2ApplicationKey',\n      'b2BucketName',\n      'b2DownloadUrl',\n    ];\n\n    // the checkboxes we need to watch and to save.\n    this.checkboxes = [\n      'mustResize',\n      'overrideAvatarUpload',\n      'addsWatermarks',\n\n      'disableHotlinkProtection',\n      'disableDownloadLogging',\n    ];\n\n    // fields that are objects\n    this.objects = [\n      'mimeTypes'\n    ];\n\n    // watermark positions\n    this.watermarkPositions = {\n      'top-left': 'top-left',\n      'top-right': 'top-right',\n      'bottom-left': 'bottom-left',\n      'bottom-right': 'bottom-right',\n      'center': 'center',\n      'left': 'left',\n      'top': 'top',\n      'right': 'right',\n      'bottom': 'bottom'\n    };\n\n    // get the saved settings from the database\n    const settings = app.data.settings;\n\n    // our package prefix (to be added to every field and checkbox in the setting table)\n    this.settingsPrefix = 'flagrow.upload';\n\n    // Options for the Upload methods dropdown menu.\n    this.uploadMethodOptions = settings[this.addPrefix('availableUploadMethods')] || {};\n    // Options for the Template dropdown menu.\n    this.templateOptions = settings[this.addPrefix('availableTemplates')] || {};\n\n    // Contains current values.\n    this.values = {};\n    // bind the values of the fields and checkboxes to the getter/setter functions\n    this.fields.forEach(key =>\n      this.values[key] = m.prop(settings[this.addPrefix(key)])\n    );\n    this.checkboxes.forEach(key =>\n      this.values[key] = m.prop(settings[this.addPrefix(key)] === '1')\n    );\n    this.objects.forEach(key =>\n      this.values[key] = settings[this.addPrefix(key)] ? m.prop(JSON.parse(settings[this.addPrefix(\n        key)])) : m.prop()\n    );\n\n    // Set a sane default in case no mimeTypes have been configured yet.\n    this.values.mimeTypes() || (this.values.mimeTypes = m.prop({\n      '^image\\\\/.*': {\n        adapter: 'local',\n        template: 'image-preview'\n      }\n    }));\n\n    this.newMimeType = {\n      regex: m.prop(''),\n      adapter: m.prop('local'),\n      template: m.prop('file')\n    };\n  }\n\n  /**\n   * Show the actual ImageUploadPage.\n   *\n   * @returns {*}\n   */\n  view() {\n    return [\n      m('div', { className: 'UploadPage' }, [\n        m('div', { className: 'container' }, [\n          m('form', { onsubmit: this.onsubmit.bind(this) }, [\n            m('fieldset', { className: 'UploadPage-preferences' }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.preferences.title')),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.preferences.max_file_size')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.maxFileSize() || 2048,\n                oninput: m.withAttr('value', this.values.maxFileSize)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.preferences.mime_types')),\n              m('div', { className: 'MimeTypes--Container' },\n                Object.keys(this.values.mimeTypes())\n                  .map(mime => {\n                    let config = this.values.mimeTypes()[mime];\n                    // Compatibility for older versions.\n                    if (typeof config !== 'object') {\n                      config = {\n                        adapter: config,\n                        template: 'file'\n                      };\n                    }\n\n                    return m('div', {}, [\n                      m('input', {\n                        className: 'FormControl MimeTypes',\n                        value: mime,\n                        oninput: m.withAttr('value', this.updateMimeTypeKey.bind(this, mime))\n                      }),\n                      Select.component({\n                        options: this.uploadMethodOptions,\n                        onchange: this.updateMimeTypeAdapter.bind(this, mime, config),\n                        value: config.adapter || 'local'\n                      }),\n                      Select.component({\n                        options: this.getTemplateOptionsForInput(),\n                        onchange: this.updateMimeTypeTemplate.bind(this, mime, config),\n                        value: config.template || 'local'\n                      }),\n                      Button.component({\n                        type: 'button',\n                        className: 'Button Button--warning',\n                        children: 'x',\n                        onclick: this.deleteMimeType.bind(this, mime)\n                      }),\n                    ]);\n                  }),\n                m('br'),\n                m('div', {}, [\n                  m('input', {\n                    className: 'FormControl MimeTypes add-MimeType-key',\n                    value: this.newMimeType.regex(),\n                    oninput: m.withAttr('value', this.newMimeType.regex)\n                  }),\n                  Select.component({\n                    options: this.uploadMethodOptions,\n                    className: 'add-MimeType-value',\n                    oninput: m.withAttr('value', this.newMimeType.adapter),\n                    value: this.newMimeType.adapter()\n                  }),\n                  Select.component({\n                    options: this.getTemplateOptionsForInput(),\n                    className: 'add-MimeType-value',\n                    oninput: m.withAttr('value', this.newMimeType.template),\n                    value: this.newMimeType.template()\n                  }),\n                  Button.component({\n                    type: 'button',\n                    className: 'Button Button--warning',\n                    children: '+',\n                    onclick: this.addMimeType.bind(this)\n                  }),\n                ])\n              ),\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.mime_types')),\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.download_templates')),\n              this.templateOptionsDescriptions()\n            ]),\n            m('fieldset', { className: 'UploadPage-resize' }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.resize.title')),\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.resize')),\n              Switch.component({\n                state: this.values.mustResize() || false,\n                children: app.translator.trans('flagrow-upload.admin.labels.resize.toggle'),\n                onchange: this.values.mustResize\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.resize.max_width')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.resizeMaxWidth() || 100,\n                oninput: m.withAttr('value', this.values.resizeMaxWidth),\n                disabled: !this.values.mustResize()\n              }),\n            ]),\n            m('fieldset', { className: 'UploadPage-watermark' }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.watermark.title')),\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.watermark')),\n              Switch.component({\n                state: this.values.addsWatermarks() || false,\n                children: app.translator.trans('flagrow-upload.admin.labels.watermark.toggle'),\n                onchange: this.values.addsWatermarks\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.watermark.position')),\n              m('div', {}, [\n                Select.component({\n                  options: this.watermarkPositions,\n                  onchange: this.values.watermarkPosition,\n                  value: this.values.watermarkPosition() || 'bottom-right'\n                }),\n              ]),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.watermark.file')),\n              <UploadImageButton name=\"flagrow/watermark\" />\n            ]),\n            m('fieldset', { className: 'UploadPage-downloading' }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.disable-hotlink-protection.title')),\n              m('div',\n                { className: 'helpText' },\n                app.translator.trans('flagrow-upload.admin.help_texts.disable-hotlink-protection')),\n              Switch.component({\n                state: this.values.disableHotlinkProtection() || false,\n                children: app.translator.trans(\n                  'flagrow-upload.admin.labels.disable-hotlink-protection.toggle'),\n                onchange: this.values.disableHotlinkProtection\n              }),\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.disable-download-logging.title')),\n              m('div',\n                { className: 'helpText' },\n                app.translator.trans('flagrow-upload.admin.help_texts.disable-download-logging')),\n              Switch.component({\n                state: this.values.disableDownloadLogging() || false,\n                children: app.translator.trans(\n                  'flagrow-upload.admin.labels.disable-download-logging.toggle'),\n                onchange: this.values.disableDownloadLogging\n              }),\n            ]),\n            m('fieldset', {\n              className: 'UploadPage-local',\n            }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.local.title')),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.local.cdn_url')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.cdnUrl() || '',\n                oninput: m.withAttr('value', this.values.cdnUrl)\n              }),\n            ]),\n            m('fieldset', {\n              className: 'UploadPage-imgur',\n            }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.imgur.title')),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.imgur.client_id')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.imgurClientId() || '',\n                oninput: m.withAttr('value', this.values.imgurClientId)\n              }),\n            ]),\n            m('fieldset', {\n              className: 'UploadPage-aws-s3',\n            }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.title')),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.key')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.awsS3Key() || '',\n                oninput: m.withAttr('value', this.values.awsS3Key)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.secret')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.awsS3Secret() || '',\n                oninput: m.withAttr('value', this.values.awsS3Secret)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.bucket')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.awsS3Bucket() || '',\n                oninput: m.withAttr('value', this.values.awsS3Bucket)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.region')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.awsS3Region() || '',\n                oninput: m.withAttr('value', this.values.awsS3Region)\n              }),\n            ]),\n            m('fieldset', {\n              className: 'UploadPage-ovh-svfs'\n            }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.title')),\n              m('label',\n                {},\n                app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.container')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.ovhContainer() || '',\n                oninput: m.withAttr('value', this.values.ovhContainer)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.tenantid')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.ovhTenantId() || '',\n                oninput: m.withAttr('value', this.values.ovhTenantId)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.username')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.ovhUsername() || '',\n                oninput: m.withAttr('value', this.values.ovhUsername)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.password')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.ovhPassword() || '',\n                oninput: m.withAttr('value', this.values.ovhPassword)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.region')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.ovhRegion() || '',\n                oninput: m.withAttr('value', this.values.ovhRegion)\n              }),\n            ]),\n            m('fieldset', {\n              className: 'UploadPage-backblaze-b2',\n            }, [\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.backblaze-b2.title')),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.backblaze-b2.accountid')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.b2AccountId() || '',\n                oninput: m.withAttr('value', this.values.b2AccountId)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.backblaze-b2.applicationkey')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.b2ApplicationKey() || '',\n                oninput: m.withAttr('value', this.values.b2ApplicationKey)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.backblaze-b2.bucketname')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.b2BucketName() || '',\n                oninput: m.withAttr('value', this.values.b2BucketName)\n              }),\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.backblaze-b2.downloadurl')),\n              m('input', {\n                className: 'FormControl',\n                value: this.values.b2DownloadUrl() || '',\n                oninput: m.withAttr('value', this.values.b2DownloadUrl)\n              }),\n            ]),\n            Button.component({\n              type: 'submit',\n              className: 'Button Button--primary',\n              children: app.translator.trans('flagrow-upload.admin.buttons.save'),\n              loading: this.loading,\n              disabled: !this.changed()\n            }),\n          ])\n        ])\n      ])\n    ];\n  }\n\n  getTemplateOptionsForInput() {\n    let options = [];\n\n    for (let option in this.templateOptions) {\n      options[option] = this.templateOptions[option].name;\n    }\n\n    return options;\n  }\n\n  updateMimeTypeKey(mime, value) {\n    this.values.mimeTypes()[value] = this.values.mimeTypes()[mime];\n\n    this.deleteMimeType(mime);\n  }\n\n  updateMimeTypeAdapter(mime, config, value) {\n    config.adapter = value;\n    this.values.mimeTypes()[mime] = config;\n  }\n\n  updateMimeTypeTemplate(mime, config, value) {\n    config.template = value;\n    this.values.mimeTypes()[mime] = config;\n  }\n\n  deleteMimeType(mime) {\n    delete this.values.mimeTypes()[mime];\n  }\n\n  templateOptionsDescriptions() {\n    const children = [];\n    for (let template in this.templateOptions) {\n      children.push(m('li', this.templateOptions[template].name + \": \" + this.templateOptions[template].description));\n    }\n\n    return m('ul', children);\n  }\n\n  addMimeType() {\n    this.values.mimeTypes()[this.newMimeType.regex()] = {\n      adapter: this.newMimeType.adapter(),\n      template: this.newMimeType.template()\n    };\n\n    this.newMimeType.regex('');\n    this.newMimeType.adapter('local');\n    this.newMimeType.template('file');\n  }\n\n  /**\n   * Checks if the values of the fields and checkboxes are different from\n   * the ones stored in the database\n   *\n   * @returns boolean\n   */\n  changed() {\n    var fieldsCheck = this.fields.some(\n      key => this.values[key]() !== app.data.settings[this.addPrefix(key)]);\n    var checkboxesCheck = this.checkboxes.some(\n      key => this.values[key]() !== (app.data.settings[this.addPrefix(key)] == '1'));\n    var objectsCheck = this.objects.some(\n      key => JSON.stringify(this.values[key]()) !== (app.data.settings[this.addPrefix(key)]));\n    return fieldsCheck || checkboxesCheck || objectsCheck;\n  }\n\n  /**\n   * Saves the settings to the database and redraw the page\n   *\n   * @param e\n   */\n  onsubmit(e) {\n    // prevent the usual form submit behaviour\n    e.preventDefault();\n\n    // if the page is already saving, do nothing\n    if (this.loading) return;\n\n    // prevents multiple savings\n    this.loading = true;\n\n    // remove previous success popup\n    app.alerts.dismiss(this.successAlert);\n\n    const settings = {};\n\n    // gets all the values from the form\n    this.fields.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\n    this.checkboxes.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\n    this.objects.forEach(key => settings[this.addPrefix(key)] = JSON.stringify(this.values[key]()));\n\n    // actually saves everything in the database\n    saveSettings(settings)\n      .then(() => {\n        // on success, show popup\n        app.alerts.show(this.successAlert = new Alert({\n          type: 'success',\n          children: app.translator.trans('core.admin.basics.saved_message')\n        }));\n      })\n      .catch(() => {\n      })\n      .then(() => {\n        // return to the initial state and redraw the page\n        this.loading = false;\n        m.redraw();\n      });\n  }\n\n  /**\n   * Adds the prefix `this.settingsPrefix` at the beginning of `key`\n   *\n   * @returns string\n   */\n  addPrefix(key) {\n    return this.settingsPrefix + '.' + key;\n  }\n}\n","import {extend} from \"flarum/extend\";\nimport AdminNav from \"flarum/components/AdminNav\";\nimport AdminLinkButton from \"flarum/components/AdminLinkButton\";\nimport UploadPage from \"./components/UploadPage\";\n\nexport default function () {\n    // create the route\n    app.routes['flagrow-upload'] = {path: '/flagrow/upload', component: UploadPage.component()};\n\n    // bind the route we created to the three dots settings button\n    app.extensionSettings['flagrow-upload'] = () => m.route(app.route('flagrow-upload'));\n\n    extend(AdminNav.prototype, 'items', items => {\n        // add the Image Upload tab to the admin navigation menu\n        items.add('flagrow-upload', AdminLinkButton.component({\n            href: app.route('flagrow-upload'),\n            icon: 'far fa-file',\n            children: 'File Upload',\n            description: app.translator.trans('flagrow-upload.admin.help_texts.description')\n        }));\n    });\n}","import {extend} from \"flarum/extend\";\nimport app from \"flarum/app\";\nimport PermissionGrid from \"flarum/components/PermissionGrid\";\nimport addUploadPane from \"./addUploadPane\";\n\napp.initializers.add('flagrow-upload', app => {\n    // add the admin pane\n    addUploadPane();\n\n    // add the permission option to the relative pane\n    extend(PermissionGrid.prototype, 'startItems', items => {\n        items.add('upload', {\n            icon: 'far fa-file',\n            label: app.translator.trans('flagrow-upload.admin.permissions.upload_label'),\n            permission: 'flagrow.upload'\n        });\n    });\n\n    // add the permission option to the relative pane\n    extend(PermissionGrid.prototype, 'viewItems', items => {\n        items.add('download', {\n            icon: 'fas fa-download',\n            label: app.translator.trans('flagrow-upload.admin.permissions.download_label'),\n            permission: 'flagrow.upload.download',\n            allowGuest: true\n        });\n    });\n});\n"],"sourceRoot":""}