{"version":3,"sources":["webpack://@fof/upload/webpack/bootstrap","webpack://@fof/upload/external \"flarum.core.compat['app']\"","webpack://@fof/upload/external \"flarum.core.compat['utils/withAttr']\"","webpack://@fof/upload/external \"flarum.core.compat['extend']\"","webpack://@fof/upload/external \"flarum.core.compat['utils/Stream']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Select']\"","webpack://@fof/upload/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/upload/external \"flarum.core.compat['Component']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Switch']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Button']\"","webpack://@fof/upload/external \"flarum.core.compat['components/PermissionGrid']\"","webpack://@fof/upload/external \"flarum.core.compat['components/AdminNav']\"","webpack://@fof/upload/external \"flarum.core.compat['components/AdminLinkButton']\"","webpack://@fof/upload/external \"flarum.core.compat['utils/saveSettings']\"","webpack://@fof/upload/external \"flarum.core.compat['components/Alert']\"","webpack://@fof/upload/external \"flarum.core.compat['components/UploadImageButton']\"","webpack://@fof/upload/./src/admin/components/UploadPage.js","webpack://@fof/upload/./src/admin/index.js","webpack://@fof/upload/./src/admin/addUploadPane.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","UploadPage","oninit","vnode","this","loading","fields","checkboxes","objects","watermarkPositions","settings","app","data","settingsPrefix","uploadMethodOptions","addPrefix","templateOptions","values","forEach","Stream","JSON","parse","mimeTypes","adapter","template","newMimeType","regex","view","onsubmit","translator","trans","maxFileSize","oninput","withAttr","keys","map","mime","config","updateMimeTypeKey","Select","component","options","onchange","updateMimeTypeAdapter","getTemplateOptionsForInput","updateMimeTypeTemplate","Button","type","className","onclick","deleteMimeType","addMimeType","templateOptionsDescriptions","Switch","state","mustResize","resizeMaxWidth","disabled","whitelistedClientExtensions","addsWatermarks","watermarkPosition","UploadImageButton","disableHotlinkProtection","disableDownloadLogging","cdnUrl","imgurClientId","qiniuKey","qiniuSecret","qiniuBucket","awsS3Key","awsS3Secret","awsS3Bucket","awsS3Region","changed","option","children","push","description","fieldsCheck","some","checkboxesCheck","objectsCheck","stringify","e","preventDefault","alerts","dismiss","successAlert","saveSettings","then","show","Alert","redraw","Component","initializers","add","routes","path","extensionSettings","route","set","extend","AdminNav","items","AdminLinkButton","href","icon","PermissionGrid","label","permission","allowGuest"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['utils/withAttr'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['utils/Stream'];","module.exports = flarum.core.compat['components/Select'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/PermissionGrid'];","module.exports = flarum.core.compat['components/AdminNav'];","module.exports = flarum.core.compat['components/AdminLinkButton'];","module.exports = flarum.core.compat['utils/saveSettings'];","module.exports = flarum.core.compat['components/Alert'];","module.exports = flarum.core.compat['components/UploadImageButton'];","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport saveSettings from 'flarum/utils/saveSettings';\nimport Alert from 'flarum/components/Alert';\nimport Select from 'flarum/components/Select';\nimport Switch from 'flarum/components/Switch';\nimport UploadImageButton from 'flarum/components/UploadImageButton';\nimport withAttr from 'flarum/utils/withAttr';\nimport Stream from 'flarum/utils/Stream';\n\n/* global m */\n\nexport default class UploadPage extends Component {\n\n    oninit(vnode) {\n        super.oninit(vnode);\n        // whether we are saving the settings or not right now\n        this.loading = false;\n\n        // the fields we need to watch and to save\n        this.fields = [\n            // image\n            'resizeMaxWidth',\n            'cdnUrl',\n            'maxFileSize',\n            'whitelistedClientExtensions',\n            // watermark\n            'watermark',\n            'watermarkPosition',\n            // Imgur\n            'imgurClientId',\n            // AWS\n            'awsS3Key',\n            'awsS3Secret',\n            'awsS3Bucket',\n            'awsS3Region',\n            // QIniu\n            'qiniuKey',\n            'qiniuSecret',\n            'qiniuBucket',\n        ];\n\n        // the checkboxes we need to watch and to save.\n        this.checkboxes = [\n            'mustResize',\n            'addsWatermarks',\n\n            'disableHotlinkProtection',\n            'disableDownloadLogging',\n        ];\n\n        // fields that are objects\n        this.objects = [\n            'mimeTypes',\n        ];\n\n        // watermark positions\n        this.watermarkPositions = {\n            'top-left': 'top-left',\n            'top-right': 'top-right',\n            'bottom-left': 'bottom-left',\n            'bottom-right': 'bottom-right',\n            'center': 'center',\n            'left': 'left',\n            'top': 'top',\n            'right': 'right',\n            'bottom': 'bottom',\n        };\n\n        // get the saved settings from the database\n        const settings = app.data.settings;\n\n        // our package prefix (to be added to every field and checkbox in the setting table)\n        this.settingsPrefix = 'fof-upload';\n\n        // Options for the Upload methods dropdown menu.\n        this.uploadMethodOptions = settings[this.addPrefix('availableUploadMethods')] || {};\n        // Options for the Template dropdown menu.\n        this.templateOptions = settings[this.addPrefix('availableTemplates')] || {};\n\n        // Contains current values.\n        this.values = {};\n        // bind the values of the fields and checkboxes to the getter/setter functions\n        this.fields.forEach(key =>\n            this.values[key] = Stream(settings[this.addPrefix(key)])\n        );\n        this.checkboxes.forEach(key =>\n            this.values[key] = Stream(settings[this.addPrefix(key)] === '1')\n        );\n        this.objects.forEach(key =>\n            this.values[key] = settings[this.addPrefix(key)]\n                ? Stream(JSON.parse(settings[this.addPrefix(key)]))\n                : Stream()\n        );\n\n        // Set a sane default in case no mimeTypes have been configured yet.\n        this.values.mimeTypes() || (this.values.mimeTypes = Stream({\n            '^image\\\\/.*': {\n                adapter: 'local',\n                template: 'image-preview',\n            },\n        }));\n\n        this.newMimeType = {\n            regex: Stream(''),\n            adapter: Stream('local'),\n            template: Stream('file'),\n        };\n    }\n\n    /**\n     * Show the actual ImageUploadPage.\n     *\n     * @returns {*}\n     */\n    view() {\n        return [\n            m('.UploadPage', [\n                m('.container', [\n                    m('form', {\n                        onsubmit: this.onsubmit.bind(this),\n                    }, [\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.preferences.title')),\n                            m('label', app.translator.trans('fof-upload.admin.labels.preferences.max_file_size')),\n                            m('input.FormControl', {\n                                value: this.values.maxFileSize() || 2048,\n                                oninput: withAttr('value', this.values.maxFileSize),\n                            }),\n                            m('label', app.translator.trans('fof-upload.admin.labels.preferences.mime_types')),\n                            m('.MimeTypes--Container',\n                                Object.keys(this.values.mimeTypes())\n                                    .map(mime => {\n                                        let config = this.values.mimeTypes()[mime];\n                                        // Compatibility for older versions.\n                                        if (typeof config !== 'object') {\n                                            config = {\n                                                adapter: config,\n                                                template: 'file',\n                                            };\n                                        }\n\n                                        return m('div', [\n                                            m('input.FormControl.MimeTypes', {\n                                                value: mime,\n                                                oninput: withAttr('value', this.updateMimeTypeKey.bind(this, mime)),\n                                            }),\n                                            Select.component({\n                                                options: this.uploadMethodOptions,\n                                                onchange: this.updateMimeTypeAdapter.bind(this, mime, config),\n                                                value: config.adapter || 'local',\n                                            }),\n                                            Select.component({\n                                                options: this.getTemplateOptionsForInput(),\n                                                onchange: this.updateMimeTypeTemplate.bind(this, mime, config),\n                                                value: config.template || 'local',\n                                            }),\n                                            Button.component({\n                                                type: 'button',\n                                                className: 'Button Button--warning',\n                                                onclick: this.deleteMimeType.bind(this, mime),\n                                            }, 'x'),\n                                        ]);\n                                    }),\n                                m('br'),\n                                m('div', [\n                                    m('input.FormControl.MimeTypes.add-MimeType-key', {\n                                        value: this.newMimeType.regex(),\n                                        oninput: withAttr('value', this.newMimeType.regex),\n                                    }),\n                                    Select.component({\n                                        options: this.uploadMethodOptions,\n                                        className: 'add-MimeType-value',\n                                        oninput: withAttr('value', this.newMimeType.adapter),\n                                        value: this.newMimeType.adapter(),\n                                    }),\n                                    Select.component({\n                                        options: this.getTemplateOptionsForInput(),\n                                        className: 'add-MimeType-value',\n                                        oninput: withAttr('value', this.newMimeType.template),\n                                        value: this.newMimeType.template(),\n                                    }),\n                                    Button.component({\n                                        type: 'button',\n                                        className: 'Button Button--warning',\n                                        onclick: this.addMimeType.bind(this),\n                                    }, '+'),\n                                ]),\n                            ),\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.mime_types')),\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.download_templates')),\n                            this.templateOptionsDescriptions(),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.resize.title')),\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.resize')),\n                            Switch.component({\n                                state: this.values.mustResize() || false,\n                                onchange: this.values.mustResize,\n                            }, app.translator.trans('fof-upload.admin.labels.resize.toggle')),\n                            m('label', app.translator.trans('fof-upload.admin.labels.resize.max_width')),\n                            m('input', {\n                                className: 'FormControl',\n                                value: this.values.resizeMaxWidth() || 100,\n                                oninput: withAttr('value', this.values.resizeMaxWidth),\n                                disabled: !this.values.mustResize(),\n                            }),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.client_extension.title')),\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.client_extension')),\n                            m('input', {\n                                className: 'FormControl',\n                                value: this.values.whitelistedClientExtensions() || '',\n                                oninput: withAttr('value', this.values.whitelistedClientExtensions),\n                            }),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.watermark.title')),\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.watermark')),\n                            Switch.component({\n                                state: this.values.addsWatermarks() || false,\n                                onchange: this.values.addsWatermarks,\n                            }, app.translator.trans('fof-upload.admin.labels.watermark.toggle')),\n                            m('label', app.translator.trans('fof-upload.admin.labels.watermark.position')),\n                            m('div', [\n                                Select.component({\n                                    options: this.watermarkPositions,\n                                    onchange: this.values.watermarkPosition,\n                                    value: this.values.watermarkPosition() || 'bottom-right',\n                                }),\n                            ]),\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.watermark.file')),\n                            UploadImageButton.component({\n                                name: 'fof/watermark',\n                            }),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.disable-hotlink-protection.title')),\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-hotlink-protection')),\n                            Switch.component({\n                                state: this.values.disableHotlinkProtection() || false,\n                                onchange: this.values.disableHotlinkProtection,\n                            }, app.translator.trans('fof-upload.admin.labels.disable-hotlink-protection.toggle')),\n                            m('legend', app.translator.trans('fof-upload.admin.labels.disable-download-logging.title')),\n                            m('.helpText', app.translator.trans('fof-upload.admin.help_texts.disable-download-logging')),\n                            Switch.component({\n                                state: this.values.disableDownloadLogging() || false,\n                                onchange: this.values.disableDownloadLogging,\n                            }, app.translator.trans('fof-upload.admin.labels.disable-download-logging.toggle')),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.local.title')),\n                            m('label', app.translator.trans('fof-upload.admin.labels.local.cdn_url')),\n                            m('input.FormControl', {\n                                value: this.values.cdnUrl() || '',\n                                oninput: withAttr('value', this.values.cdnUrl),\n                            }),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.imgur.title')),\n                            m('label', app.translator.trans('fof-upload.admin.labels.imgur.client_id')),\n                            m('input.FormControl', {\n                                value: this.values.imgurClientId() || '',\n                                oninput: withAttr('value', this.values.imgurClientId),\n                            }),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.qiniu.title')),\n                            m('label', app.translator.trans('fof-upload.admin.labels.qiniu.key')),\n                            m('input.FormControl', {\n                                value: this.values.qiniuKey() || '',\n                                oninput: withAttr('value', this.values.qiniuKey),\n                            }),\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.secret')),\n                            m('input.FormControl', {\n                                value: this.values.qiniuSecret() || '',\n                                oninput: withAttr('value', this.values.qiniuSecret),\n                            }),\n                            m('label', {}, app.translator.trans('fof-upload.admin.labels.qiniu.bucket')),\n                            m('input.FormControl', {\n                                value: this.values.qiniuBucket() || '',\n                                oninput: withAttr('value', this.values.qiniuBucket),\n                            }),\n                        ]),\n                        m('fieldset', [\n                            m('legend', app.translator.trans('fof-upload.admin.labels.aws-s3.title')),\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.key')),\n                            m('input.FormControl', {\n                                value: this.values.awsS3Key() || '',\n                                oninput: withAttr('value', this.values.awsS3Key),\n                            }),\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.secret')),\n                            m('input.FormControl', {\n                                value: this.values.awsS3Secret() || '',\n                                oninput: withAttr('value', this.values.awsS3Secret),\n                            }),\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.bucket')),\n                            m('input.FormControl', {\n                                value: this.values.awsS3Bucket() || '',\n                                oninput: withAttr('value', this.values.awsS3Bucket),\n                            }),\n                            m('label', app.translator.trans('fof-upload.admin.labels.aws-s3.region')),\n                            m('input.FormControl', {\n                                value: this.values.awsS3Region() || '',\n                                oninput: withAttr('value', this.values.awsS3Region),\n                            }),\n                        ]),\n                        Button.component({\n                            type: 'submit',\n                            className: 'Button Button--primary',\n                            loading: this.loading,\n                            disabled: !this.changed(),\n                        }, app.translator.trans('fof-upload.admin.buttons.save')),\n                    ]),\n                ]),\n            ]),\n        ];\n    }\n\n    getTemplateOptionsForInput() {\n        const options = {};\n\n        for (let option in this.templateOptions) {\n            if (!this.templateOptions.hasOwnProperty(option)) {\n                continue;\n            }\n\n            options[option] = this.templateOptions[option].name;\n        }\n\n        return options;\n    }\n\n    updateMimeTypeKey(mime, value) {\n        this.values.mimeTypes()[value] = this.values.mimeTypes()[mime];\n\n        this.deleteMimeType(mime);\n    }\n\n    updateMimeTypeAdapter(mime, config, value) {\n        config.adapter = value;\n        this.values.mimeTypes()[mime] = config;\n    }\n\n    updateMimeTypeTemplate(mime, config, value) {\n        config.template = value;\n        this.values.mimeTypes()[mime] = config;\n    }\n\n    deleteMimeType(mime) {\n        delete this.values.mimeTypes()[mime];\n    }\n\n    templateOptionsDescriptions() {\n        const children = [];\n\n        for (let template in this.templateOptions) {\n            if (!this.templateOptions.hasOwnProperty(template)) {\n                continue;\n            }\n\n            children.push(m('li', this.templateOptions[template].name + ': ' + this.templateOptions[template].description));\n        }\n\n        return m('ul', children);\n    }\n\n    addMimeType() {\n        this.values.mimeTypes()[this.newMimeType.regex()] = {\n            adapter: this.newMimeType.adapter(),\n            template: this.newMimeType.template()\n        };\n\n        this.newMimeType.regex('');\n        this.newMimeType.adapter('local');\n        this.newMimeType.template('file');\n    }\n\n    /**\n     * Checks if the values of the fields and checkboxes are different from\n     * the ones stored in the database\n     *\n     * @returns boolean\n     */\n    changed() {\n        const fieldsCheck = this.fields.some(\n            key => this.values[key]() !== app.data.settings[this.addPrefix(key)]\n        );\n        const checkboxesCheck = this.checkboxes.some(\n            key => this.values[key]() !== (app.data.settings[this.addPrefix(key)] === '1')\n        );\n        const objectsCheck = this.objects.some(\n            key => JSON.stringify(this.values[key]()) !== (app.data.settings[this.addPrefix(key)])\n        );\n\n        return fieldsCheck || checkboxesCheck || objectsCheck;\n    }\n\n    /**\n     * Saves the settings to the database and redraw the page\n     *\n     * @param e\n     */\n    onsubmit(e) {\n        // prevent the usual form submit behaviour\n        e.preventDefault();\n\n        // if the page is already saving, do nothing\n        if (this.loading) return;\n\n        // prevents multiple savings\n        this.loading = true;\n\n        // remove previous success popup\n        app.alerts.dismiss(this.successAlert);\n\n        const settings = {};\n\n        // gets all the values from the form\n        this.fields.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\n        this.checkboxes.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\n        this.objects.forEach(key => settings[this.addPrefix(key)] = JSON.stringify(this.values[key]()));\n\n        // actually saves everything in the database\n        saveSettings(settings)\n            .then(() => {\n                // on success, show popup\n                this.successAlert = app.alerts.show(\n                    Alert,\n                    {type: 'success'},\n                    app.translator.trans('core.admin.basics.saved_message')\n                );\n            })\n            .catch(() => {\n            })\n            .then(() => {\n                // return to the initial state and redraw the page\n                this.loading = false;\n                m.redraw();\n            });\n    }\n\n    /**\n     * Adds the prefix `this.settingsPrefix` at the beginning of `key`\n     *\n     * @returns string\n     */\n    addPrefix(key) {\n        return this.settingsPrefix + '.' + key;\n    }\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport PermissionGrid from 'flarum/components/PermissionGrid';\nimport addUploadPane from './addUploadPane';\n\napp.initializers.add('fof-upload', app => {\n    // add the admin pane\n    addUploadPane();\n\n    // add the permission option to the relative pane\n    extend(PermissionGrid.prototype, 'startItems', items => {\n        items.add('fof-upload', {\n            icon: 'far fa-file',\n            label: app.translator.trans('fof-upload.admin.permissions.upload_label'),\n            permission: 'fof-upload.upload',\n        });\n    });\n\n    // add the permission option to the relative pane\n    extend(PermissionGrid.prototype, 'viewItems', items => {\n        items.add('fof-download', {\n            icon: 'fas fa-download',\n            label: app.translator.trans('fof-upload.admin.permissions.download_label'),\n            permission: 'fof-upload.download',\n            allowGuest: true,\n        });\n    });\n});\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport AdminNav from 'flarum/components/AdminNav';\nimport AdminLinkButton from 'flarum/components/AdminLinkButton';\nimport UploadPage from './components/UploadPage';\n\nexport default function () {\n    app.routes['fof-upload'] = {path: '/fof/upload', component: UploadPage};\n    app.extensionSettings['fof-upload'] = () => m.route.set(app.route('fof-upload'));\n\n    extend(AdminNav.prototype, 'items', items => {\n        items.add('fof-upload', AdminLinkButton.component({\n            href: app.route('fof-upload'),\n            icon: 'far fa-file',\n            description: app.translator.trans('fof-upload.admin.pane.description'),\n        }, app.translator.trans('fof-upload.admin.pane.title')));\n    });\n}\n"],"sourceRoot":""}